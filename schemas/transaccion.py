from pydantic import BaseModel, Field, field_validator
from datetime import datetime
from typing import Optional
from decimal import Decimal, ROUND_HALF_UP
from core.enums import TipoTransaccion, EstadoTransaccion


# üìù Esquema de entrada: crear una nueva transacci√≥n
class TransaccionCreate(BaseModel):
    """
    Esquema para la creaci√≥n de una transacci√≥n.
    Valida que el monto sea positivo y lo normaliza a dos decimales.
    """
    cuenta_destino_id: int = Field(..., gt=0, description="ID de la cuenta destino")
    monto: Decimal = Field(..., gt=0, description="Monto a transferir (debe ser mayor a 0)")
    tipo: TipoTransaccion = Field(
        default=TipoTransaccion.transferencia,
        description="Tipo de transacci√≥n"
    )
    descripcion: Optional[str] = Field(
        default=None,
        max_length=255,
        description="Descripci√≥n opcional de la transacci√≥n"
    )

    # ‚úÖ Normalizar monto a 2 decimales, incluso si es int o float
    @field_validator("monto", mode="before")
    @classmethod
    def normalizar_monto(cls, v: Decimal | float | int) -> Decimal:
        """
        Convierte cualquier valor num√©rico (int, float, Decimal) a Decimal con 2 decimales.
        """
        if isinstance(v, (int, float)):
            v = Decimal(str(v))
        elif not isinstance(v, Decimal):
            raise TypeError("El monto debe ser un n√∫mero v√°lido.")
        return v.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)


# üì§ Esquema de salida: devolver una transacci√≥n
class TransaccionOut(BaseModel):
    """
    Esquema de salida para mostrar una transacci√≥n completa.
    Incluye informaci√≥n sobre origen, destino, estado y monto.
    """
    id: int = Field(..., description="ID de la transacci√≥n")
    cuenta_origen_id: int = Field(..., description="ID de la cuenta que envi√≥ el dinero")
    cuenta_destino_id: int = Field(..., description="ID de la cuenta que recibi√≥ el dinero")
    monto: Decimal = Field(..., description="Monto transferido con precisi√≥n monetaria")
    tipo: TipoTransaccion = Field(..., description="Tipo de transacci√≥n")
    estado: EstadoTransaccion = Field(..., description="Estado de la transacci√≥n")
    fecha: datetime = Field(..., description="Fecha y hora de ejecuci√≥n")
    descripcion: Optional[str] = Field(default=None, max_length=255)

    class Config:
        from_attributes = True  # Permite usar model_validate con ORM

    # ‚úÖ Normalizar monto en salida (por coherencia)
    @field_validator("monto", mode="before")
    @classmethod
    def normalizar_monto(cls, v: Decimal | float | int) -> Decimal:
        """
        Convierte y normaliza el monto a Decimal(2) para garantizar consistencia.
        """
        if isinstance(v, (int, float)):
            v = Decimal(str(v))
        elif not isinstance(v, Decimal):
            raise TypeError("El monto debe ser un n√∫mero v√°lido.")
        return v.quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
